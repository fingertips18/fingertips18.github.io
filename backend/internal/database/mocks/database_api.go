// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package database

import (
	"context"

	"github.com/fingertips18/fingertips18.github.io/backend/internal/database"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDatabaseAPI creates a new instance of MockDatabaseAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseAPI {
	mock := &MockDatabaseAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabaseAPI is an autogenerated mock type for the DatabaseAPI type
type MockDatabaseAPI struct {
	mock.Mock
}

type MockDatabaseAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseAPI) EXPECT() *MockDatabaseAPI_Expecter {
	return &MockDatabaseAPI_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockDatabaseAPI
func (_mock *MockDatabaseAPI) Close() {
	_mock.Called()
	return
}

// MockDatabaseAPI_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDatabaseAPI_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDatabaseAPI_Expecter) Close() *MockDatabaseAPI_Close_Call {
	return &MockDatabaseAPI_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDatabaseAPI_Close_Call) Run(run func()) *MockDatabaseAPI_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabaseAPI_Close_Call) Return() *MockDatabaseAPI_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDatabaseAPI_Close_Call) RunAndReturn(run func()) *MockDatabaseAPI_Close_Call {
	_c.Run(run)
	return _c
}

// Exec provides a mock function for the type MockDatabaseAPI
func (_mock *MockDatabaseAPI) Exec(ctx context.Context, query string, args ...any) (database.CommandTag, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 database.CommandTag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (database.CommandTag, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) database.CommandTag); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.CommandTag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAPI_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockDatabaseAPI_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *MockDatabaseAPI_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *MockDatabaseAPI_Exec_Call {
	return &MockDatabaseAPI_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDatabaseAPI_Exec_Call) Run(run func(ctx context.Context, query string, args ...any)) *MockDatabaseAPI_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseAPI_Exec_Call) Return(commandTag database.CommandTag, err error) *MockDatabaseAPI_Exec_Call {
	_c.Call.Return(commandTag, err)
	return _c
}

func (_c *MockDatabaseAPI_Exec_Call) RunAndReturn(run func(ctx context.Context, query string, args ...any) (database.CommandTag, error)) *MockDatabaseAPI_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockDatabaseAPI
func (_mock *MockDatabaseAPI) Query(ctx context.Context, query string, args ...any) (database.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 database.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (database.Rows, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) database.Rows); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAPI_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDatabaseAPI_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *MockDatabaseAPI_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *MockDatabaseAPI_Query_Call {
	return &MockDatabaseAPI_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDatabaseAPI_Query_Call) Run(run func(ctx context.Context, query string, args ...any)) *MockDatabaseAPI_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseAPI_Query_Call) Return(rows database.Rows, err error) *MockDatabaseAPI_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *MockDatabaseAPI_Query_Call) RunAndReturn(run func(ctx context.Context, query string, args ...any) (database.Rows, error)) *MockDatabaseAPI_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type MockDatabaseAPI
func (_mock *MockDatabaseAPI) QueryRow(ctx context.Context, query string, args ...any) database.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 database.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) database.Row); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Row)
		}
	}
	return r0
}

// MockDatabaseAPI_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockDatabaseAPI_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *MockDatabaseAPI_Expecter) QueryRow(ctx interface{}, query interface{}, args ...interface{}) *MockDatabaseAPI_QueryRow_Call {
	return &MockDatabaseAPI_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDatabaseAPI_QueryRow_Call) Run(run func(ctx context.Context, query string, args ...any)) *MockDatabaseAPI_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseAPI_QueryRow_Call) Return(row database.Row) *MockDatabaseAPI_QueryRow_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *MockDatabaseAPI_QueryRow_Call) RunAndReturn(run func(ctx context.Context, query string, args ...any) database.Row) *MockDatabaseAPI_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}
