// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package v1

import (
	"context"

	"github.com/fingertips18/fingertips18.github.io/backend/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProjectRepository creates a new instance of MockProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectRepository {
	mock := &MockProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectRepository is an autogenerated mock type for the ProjectRepository type
type MockProjectRepository struct {
	mock.Mock
}

type MockProjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectRepository) EXPECT() *MockProjectRepository_Expecter {
	return &MockProjectRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) Create(ctx context.Context, project *domain.Project) (string, error) {
	ret := _mock.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Project) (string, error)); ok {
		return returnFunc(ctx, project)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Project) string); ok {
		r0 = returnFunc(ctx, project)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Project) error); ok {
		r1 = returnFunc(ctx, project)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - project *domain.Project
func (_e *MockProjectRepository_Expecter) Create(ctx interface{}, project interface{}) *MockProjectRepository_Create_Call {
	return &MockProjectRepository_Create_Call{Call: _e.mock.On("Create", ctx, project)}
}

func (_c *MockProjectRepository_Create_Call) Run(run func(ctx context.Context, project *domain.Project)) *MockProjectRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Project
		if args[1] != nil {
			arg1 = args[1].(*domain.Project)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectRepository_Create_Call) Return(s string, err error) *MockProjectRepository_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockProjectRepository_Create_Call) RunAndReturn(run func(ctx context.Context, project *domain.Project) (string, error)) *MockProjectRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProjectRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockProjectRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockProjectRepository_Delete_Call {
	return &MockProjectRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockProjectRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockProjectRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectRepository_Delete_Call) Return(err error) *MockProjectRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockProjectRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) Get(ctx context.Context, id string) (*domain.Project, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Project, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Project); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProjectRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockProjectRepository_Expecter) Get(ctx interface{}, id interface{}) *MockProjectRepository_Get_Call {
	return &MockProjectRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockProjectRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockProjectRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectRepository_Get_Call) Return(project *domain.Project, err error) *MockProjectRepository_Get_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.Project, error)) *MockProjectRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) List(ctx context.Context, filter domain.ProjectFilter) ([]domain.Project, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectFilter) ([]domain.Project, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ProjectFilter) []domain.Project); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ProjectFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProjectRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter domain.ProjectFilter
func (_e *MockProjectRepository_Expecter) List(ctx interface{}, filter interface{}) *MockProjectRepository_List_Call {
	return &MockProjectRepository_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *MockProjectRepository_List_Call) Run(run func(ctx context.Context, filter domain.ProjectFilter)) *MockProjectRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ProjectFilter
		if args[1] != nil {
			arg1 = args[1].(domain.ProjectFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectRepository_List_Call) Return(projects []domain.Project, err error) *MockProjectRepository_List_Call {
	_c.Call.Return(projects, err)
	return _c
}

func (_c *MockProjectRepository_List_Call) RunAndReturn(run func(ctx context.Context, filter domain.ProjectFilter) ([]domain.Project, error)) *MockProjectRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) Update(ctx context.Context, project *domain.Project) (*domain.Project, error) {
	ret := _mock.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Project) (*domain.Project, error)); ok {
		return returnFunc(ctx, project)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Project) *domain.Project); ok {
		r0 = returnFunc(ctx, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Project) error); ok {
		r1 = returnFunc(ctx, project)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - project *domain.Project
func (_e *MockProjectRepository_Expecter) Update(ctx interface{}, project interface{}) *MockProjectRepository_Update_Call {
	return &MockProjectRepository_Update_Call{Call: _e.mock.On("Update", ctx, project)}
}

func (_c *MockProjectRepository_Update_Call) Run(run func(ctx context.Context, project *domain.Project)) *MockProjectRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Project
		if args[1] != nil {
			arg1 = args[1].(*domain.Project)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectRepository_Update_Call) Return(project1 *domain.Project, err error) *MockProjectRepository_Update_Call {
	_c.Call.Return(project1, err)
	return _c
}

func (_c *MockProjectRepository_Update_Call) RunAndReturn(run func(ctx context.Context, project *domain.Project) (*domain.Project, error)) *MockProjectRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
