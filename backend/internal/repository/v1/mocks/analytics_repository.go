// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package v1

import (
	"github.com/fingertips18/fingertips18.github.io/backend/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAnalyticsRepository creates a new instance of MockAnalyticsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnalyticsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnalyticsRepository {
	mock := &MockAnalyticsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAnalyticsRepository is an autogenerated mock type for the AnalyticsRepository type
type MockAnalyticsRepository struct {
	mock.Mock
}

type MockAnalyticsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnalyticsRepository) EXPECT() *MockAnalyticsRepository_Expecter {
	return &MockAnalyticsRepository_Expecter{mock: &_m.Mock}
}

// PageView provides a mock function for the type MockAnalyticsRepository
func (_mock *MockAnalyticsRepository) PageView(pageView domain.PageView) error {
	ret := _mock.Called(pageView)

	if len(ret) == 0 {
		panic("no return value specified for PageView")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.PageView) error); ok {
		r0 = returnFunc(pageView)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAnalyticsRepository_PageView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PageView'
type MockAnalyticsRepository_PageView_Call struct {
	*mock.Call
}

// PageView is a helper method to define mock.On call
//   - pageView domain.PageView
func (_e *MockAnalyticsRepository_Expecter) PageView(pageView interface{}) *MockAnalyticsRepository_PageView_Call {
	return &MockAnalyticsRepository_PageView_Call{Call: _e.mock.On("PageView", pageView)}
}

func (_c *MockAnalyticsRepository_PageView_Call) Run(run func(pageView domain.PageView)) *MockAnalyticsRepository_PageView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.PageView
		if args[0] != nil {
			arg0 = args[0].(domain.PageView)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAnalyticsRepository_PageView_Call) Return(err error) *MockAnalyticsRepository_PageView_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAnalyticsRepository_PageView_Call) RunAndReturn(run func(pageView domain.PageView) error) *MockAnalyticsRepository_PageView_Call {
	_c.Call.Return(run)
	return _c
}
