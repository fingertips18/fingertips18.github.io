// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package v1

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProjectHandler creates a new instance of MockProjectHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectHandler {
	mock := &MockProjectHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectHandler is an autogenerated mock type for the ProjectHandler type
type MockProjectHandler struct {
	mock.Mock
}

type MockProjectHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectHandler) EXPECT() *MockProjectHandler_Expecter {
	return &MockProjectHandler_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProjectHandler
func (_mock *MockProjectHandler) Create(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockProjectHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockProjectHandler_Expecter) Create(w interface{}, r interface{}) *MockProjectHandler_Create_Call {
	return &MockProjectHandler_Create_Call{Call: _e.mock.On("Create", w, r)}
}

func (_c *MockProjectHandler_Create_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockProjectHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectHandler_Create_Call) Return() *MockProjectHandler_Create_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProjectHandler_Create_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockProjectHandler_Create_Call {
	_c.Run(run)
	return _c
}

// Delete provides a mock function for the type MockProjectHandler
func (_mock *MockProjectHandler) Delete(w http.ResponseWriter, r *http.Request, id string) {
	_mock.Called(w, r, id)
	return
}

// MockProjectHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProjectHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - id string
func (_e *MockProjectHandler_Expecter) Delete(w interface{}, r interface{}, id interface{}) *MockProjectHandler_Delete_Call {
	return &MockProjectHandler_Delete_Call{Call: _e.mock.On("Delete", w, r, id)}
}

func (_c *MockProjectHandler_Delete_Call) Run(run func(w http.ResponseWriter, r *http.Request, id string)) *MockProjectHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProjectHandler_Delete_Call) Return() *MockProjectHandler_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProjectHandler_Delete_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, id string)) *MockProjectHandler_Delete_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function for the type MockProjectHandler
func (_mock *MockProjectHandler) Get(w http.ResponseWriter, r *http.Request, id string) {
	_mock.Called(w, r, id)
	return
}

// MockProjectHandler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProjectHandler_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - id string
func (_e *MockProjectHandler_Expecter) Get(w interface{}, r interface{}, id interface{}) *MockProjectHandler_Get_Call {
	return &MockProjectHandler_Get_Call{Call: _e.mock.On("Get", w, r, id)}
}

func (_c *MockProjectHandler_Get_Call) Run(run func(w http.ResponseWriter, r *http.Request, id string)) *MockProjectHandler_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProjectHandler_Get_Call) Return() *MockProjectHandler_Get_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProjectHandler_Get_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, id string)) *MockProjectHandler_Get_Call {
	_c.Run(run)
	return _c
}

// List provides a mock function for the type MockProjectHandler
func (_mock *MockProjectHandler) List(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockProjectHandler_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProjectHandler_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockProjectHandler_Expecter) List(w interface{}, r interface{}) *MockProjectHandler_List_Call {
	return &MockProjectHandler_List_Call{Call: _e.mock.On("List", w, r)}
}

func (_c *MockProjectHandler_List_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockProjectHandler_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectHandler_List_Call) Return() *MockProjectHandler_List_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProjectHandler_List_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockProjectHandler_List_Call {
	_c.Run(run)
	return _c
}

// ServeHTTP provides a mock function for the type MockProjectHandler
func (_mock *MockProjectHandler) ServeHTTP(responseWriter http.ResponseWriter, request *http.Request) {
	_mock.Called(responseWriter, request)
	return
}

// MockProjectHandler_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type MockProjectHandler_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - responseWriter http.ResponseWriter
//   - request *http.Request
func (_e *MockProjectHandler_Expecter) ServeHTTP(responseWriter interface{}, request interface{}) *MockProjectHandler_ServeHTTP_Call {
	return &MockProjectHandler_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", responseWriter, request)}
}

func (_c *MockProjectHandler_ServeHTTP_Call) Run(run func(responseWriter http.ResponseWriter, request *http.Request)) *MockProjectHandler_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectHandler_ServeHTTP_Call) Return() *MockProjectHandler_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProjectHandler_ServeHTTP_Call) RunAndReturn(run func(responseWriter http.ResponseWriter, request *http.Request)) *MockProjectHandler_ServeHTTP_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function for the type MockProjectHandler
func (_mock *MockProjectHandler) Update(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockProjectHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockProjectHandler_Expecter) Update(w interface{}, r interface{}) *MockProjectHandler_Update_Call {
	return &MockProjectHandler_Update_Call{Call: _e.mock.On("Update", w, r)}
}

func (_c *MockProjectHandler_Update_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockProjectHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectHandler_Update_Call) Return() *MockProjectHandler_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProjectHandler_Update_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockProjectHandler_Update_Call {
	_c.Run(run)
	return _c
}
