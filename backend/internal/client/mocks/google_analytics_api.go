// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	"github.com/blackmagiqq/ga4"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGoogleAnalyticsAPI creates a new instance of MockGoogleAnalyticsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoogleAnalyticsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoogleAnalyticsAPI {
	mock := &MockGoogleAnalyticsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGoogleAnalyticsAPI is an autogenerated mock type for the GoogleAnalyticsAPI type
type MockGoogleAnalyticsAPI struct {
	mock.Mock
}

type MockGoogleAnalyticsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoogleAnalyticsAPI) EXPECT() *MockGoogleAnalyticsAPI_Expecter {
	return &MockGoogleAnalyticsAPI_Expecter{mock: &_m.Mock}
}

// SendEvent provides a mock function for the type MockGoogleAnalyticsAPI
func (_mock *MockGoogleAnalyticsAPI) SendEvent(event ga4.Event, clientID ga4.ClientID) error {
	ret := _mock.Called(event, clientID)

	if len(ret) == 0 {
		panic("no return value specified for SendEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(ga4.Event, ga4.ClientID) error); ok {
		r0 = returnFunc(event, clientID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGoogleAnalyticsAPI_SendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvent'
type MockGoogleAnalyticsAPI_SendEvent_Call struct {
	*mock.Call
}

// SendEvent is a helper method to define mock.On call
//   - event ga4.Event
//   - clientID ga4.ClientID
func (_e *MockGoogleAnalyticsAPI_Expecter) SendEvent(event interface{}, clientID interface{}) *MockGoogleAnalyticsAPI_SendEvent_Call {
	return &MockGoogleAnalyticsAPI_SendEvent_Call{Call: _e.mock.On("SendEvent", event, clientID)}
}

func (_c *MockGoogleAnalyticsAPI_SendEvent_Call) Run(run func(event ga4.Event, clientID ga4.ClientID)) *MockGoogleAnalyticsAPI_SendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 ga4.Event
		if args[0] != nil {
			arg0 = args[0].(ga4.Event)
		}
		var arg1 ga4.ClientID
		if args[1] != nil {
			arg1 = args[1].(ga4.ClientID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGoogleAnalyticsAPI_SendEvent_Call) Return(err error) *MockGoogleAnalyticsAPI_SendEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGoogleAnalyticsAPI_SendEvent_Call) RunAndReturn(run func(event ga4.Event, clientID ga4.ClientID) error) *MockGoogleAnalyticsAPI_SendEvent_Call {
	_c.Call.Return(run)
	return _c
}
